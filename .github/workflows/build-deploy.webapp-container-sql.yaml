name: Create, Build and Deploy Docker WebApp with Azure SQL

on: push

# Pre-Requisites
# Create the target Resource Group
# 1. Open the Azure Cloud Shell at https://shell.azure.com. You can alternately use the Azure CLI if you've installed it locally. (For more information on Cloud Shell, see the Cloud Shell Overview.)  
#   az group create --name {resource-group-name} --location {resource-group-location}
# 
# 2. Create a Service Principal to manage your resource group from GitHub Actions
#   az ad sp create-for-rbac --name "{service-principal-name}" --sdk-auth --role contributor --scopes /subscriptions/{subscription-id}/resourceGroups/{resource-group-name}  
#
# For help, go to: https://github.com/Azure/login#configure-deployment-credentials

# CONFIGURATION
# For help, go to https://github.com/Azure/Actions
#
# Set up the following secrets in your repository:
#   AZURE_CREDENTIALS, SQL_SERVER_ADMIN_PASSWORD
# 2. Change these variables for your configuration:
env:
  AZURE_RESOURCE_GROUP: rsg-todo-sample   # target resource, must match the {resource-group-name} you setup in the pre-requisties
  WEB_APP_NAME: app-todo-sample           # set the name for the Web App on Azure
  ACR_NAME: crtodosample                  # set the name for the Azure Container Registry
  SQL_SERVER_NAME: sql-todo-sample        # set the name for the Azure SQL Server
  SQL_SERVER_ADMIN_LOGIN: dbadminlogin    # set the name for the Azure SQL Server admin login
  SQL_SERVER_ADMIN_PASSWORD: ${{ secrets.SQL_SERVER_ADMIN_PASSWORD }}  # password for the Azure SQL Sever admin login -> must be in the secrets
  SQL_DB_NAME: todoDb                     # set the name for the Azure SQL Database

jobs:
  build_deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        path: main

    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
      
    - name: Get ACR Info & Database Connection String
      run: |
        LOGIN_SERVER=$(az acr show --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.ACR_NAME }} --query loginServer -o tsv)
        USERNAME=$(az acr show --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.ACR_NAME }} --query name -o tsv)
        PASSWORD=$(az acr credential show --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.ACR_NAME }} --query passwords[0].value -o tsv)
        CONN_STR=$(az sql db show-connection-string --client ado.net --server ${{ env.SQL_SERVER_NAME }} --name ${{ env.SQL_DB_NAME }} -o tsv)
        CONN_STR=$(echo $CONN_STR | sed "s/<username>/${{ env.SQL_SERVER_ADMIN_LOGIN }}/g")
        CONN_STR=$(echo $CONN_STR | sed "s/<password>/${{ env.SQL_SERVER_ADMIN_PASSWORD }}/g")

        echo "::add-mask::$PASSWORD"
        echo "ACR_LOGIN_SERVER=$LOGIN_SERVER" >> $GITHUB_ENV
        echo "ACR_USERNAME=$USERNAME" >> $GITHUB_ENV
        echo "ACR_PASSWORD=$PASSWORD" >> $GITHUB_ENV
        echo "SQL_DB_CONN_STR=$CONN_STR" >> $GITHUB_ENV
        echo "APP_VERSION_DATE=$(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_ENV

    - uses: azure/docker-login@v1
      with:
        login-server: ${{ env.ACR_LOGIN_SERVER }}
        username: ${{ env.ACR_USERNAME }}
        password: ${{ env.ACR_PASSWORD }}
    
    - name: Build & Push Container
      run: |
        echo "Build image and push to ${{ env.ACR_LOGIN_SERVER }}"

        echo "Building the container..."
        docker build -t todo-sample:latest .
        echo

        echo "Tagging for azure container registry"
        docker tag todo-sample ${{ env.ACR_LOGIN_SERVER }}/todo-sample:latest
        echo

        echo "Push image"
        docker push ${{ env.ACR_LOGIN_SERVER }}/todo-sample:latest
        echo

        echo "Repositories in the container registry"
        az acr repository list -n ${{ env.ACR_LOGIN_SERVER }}        
      working-directory: ./main/todo-sample
      
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.x' # SDK Version to use; x will use the latest version of the 3.1 channel

    - name: Set Web App ACR authentication
      uses: Azure/appservice-settings@v1
      with:
        app-name: ${{ env.WEB_APP_NAME }}  
        app-settings-json: |
          [
            {
                "name": "DOCKER_REGISTRY_SERVER_URL",
                "value": "${{ env.ACR_LOGIN_SERVER }}",
                "slotSetting": false
            },
            {
                "name": "DOCKER_REGISTRY_SERVER_USERNAME",
                "value": "${{ env.ACR_USERNAME  }}",
                "slotSetting": false
            },
            {
                "name": "DOCKER_REGISTRY_SERVER_PASSWORD",
                "value": "${{ env.ACR_PASSWORD }}",
                "slotSetting": false
            },
            {
                "name": "VersionInfo__Number",
                "value": "1.0.${{ github.run_number }}"
            },
                        {
                "name": "VersionInfo__Date",
                "value": "${{ env.APP_VERSION_DATE }}"
            }
          ]

    - name: 'Deploy to Azure Web App for Container'
      uses: azure/webapps-deploy@v2
      with: 
        app-name: ${{ env.WEB_APP_NAME }} 
        images: ${{ env.ACR_LOGIN_SERVER }}/todo-sample:latest
        slot-name: staging
        
    - name: Update database
      run: |
        dotnet tool install --global dotnet-ef
        dotnet tool restore
        dotnet ef database update
      env:
        ASPNETCORE_ENVIRONMENT: Development
        ConnectionStrings__MyDbConnection: ${{ env.SQL_DB_CONN_STR }}
      working-directory: ./main/todo-sample

    - name: Swap to production slot
      run: |
        az webapp deployment slot swap --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.WEB_APP_NAME }} --slot staging --target-slot production 
    
