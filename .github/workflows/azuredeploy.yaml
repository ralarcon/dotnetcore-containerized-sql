name: Create or Update Infrastructure

# Controls when the action will run. Workflow runs when manually triggered using the UI or API.
on: workflow_dispatch

# Pre-Requisites
# Create the target Resource Group
# 1. Open the Azure Cloud Shell at https://shell.azure.com. You can alternately use the Azure CLI if you've installed it locally. (For more information on Cloud Shell, see the Cloud Shell Overview.)  
#   az group create --name {resource-group-name} --location {resource-group-location}
# 
# 2. Create a Service Principal to manage your resource group from GitHub Actions
#   az ad sp create-for-rbac --name "{service-principal-name}" --sdk-auth --role contributor --scopes /subscriptions/{subscription-id}/resourceGroups/{resource-group-name}  
#
# For help, go to: https://github.com/Azure/login#configure-deployment-credentials

# CONFIGURATION
# For help, go to https://github.com/Azure/Actions
#
# Set up the following secrets in your repository:
#   AZURE_CREDENTIALS, SQL_SERVER_ADMIN_PASSWORD
# 2. Change these variables for your configuration (and keep these in sync with the build-deploy.webapp-container-sql-backend.yaml workflow):
env:
  AZURE_RESOURCE_GROUP: rsg-todo-sample   # target resource, must match the {resource-group-name} you setup in the pre-requisties
  WEB_APP_NAME: app-todo-sample           # set the name for the Web App on Azure
  ACR_NAME: crtodosample                  # set the name for the Azure Container Registry
  CONTAINER_IMAGE_NAME: todo-sample       # set the name for the container image
  SQL_SERVER_NAME: sql-todo-sample        # set the name for the Azure SQL Server
  SQL_SERVER_ADMIN_LOGIN: dbadminlogin    # set the name for the Azure SQL Server admin login
  SQL_SERVER_ADMIN_PASSWORD: ${{ secrets.SQL_SERVER_ADMIN_PASSWORD }}  # password for the Azure SQL Sever admin login -> must be in the secrets
  SQL_DB_NAME: todoDb                     # set the name for the Azure SQL Database

jobs:
  deploy_arm_templates:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Source Code
      uses: actions/checkout@v2

    - name: Login for az cli commands 
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
      
    - name: Get Azure SubscriptionId
      run: |
        CURRENT_SUBSCRIPTION_ID=$(az account show --query id -o tsv)
        echo "AZURE_SUBSCRIPTION_ID=$CURRENT_SUBSCRIPTION_ID" >> $GITHUB_ENV
        echo "Current SubscriptionId: $CURRENT_SUBSCRIPTION_ID"

    - name: "Avoid overwrite existing deployment"
      run: |
        echo "Checks if the webapp is already deployed, if so, get its docker image to avoid the ARM deployment overwrite it."

        DEFAULT_CONTAINER_IMAGE="DOCKER|mcr.microsoft.com/dotnet/core/samples:aspnetapp"
        echo "Default container image: $DEFAULT_CONTAINER_IMAGE"
        echo "CONTAINER_IMAGE=$DEFAULT_CONTAINER_IMAGE" >> $GITHUB_ENV


        WEB_APP=$(az webapp list --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "[?name=='${{ env.WEB_APP_NAME }}'].name" -o tsv)
        if [ -n "$WEB_APP" ]; then
          EXISTING_IMAGE=$(az webapp config show --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.WEB_APP_NAME }} --query linuxFxVersion -o tsv)
          echo "Setting existing container image: $EXISTING_IMAGE"
          echo "CONTAINER_IMAGE=$EXISTING_IMAGE" >> $GITHUB_ENV
        fi

    - name: Deploy ARM templates
      uses: azure/arm-deploy@v1
      with:
        subscriptionId: ${{ env.AZURE_SUBSCRIPTION_ID }}
        resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
        template: infrastructure/azuredeploy.json
        parameters: webSiteName=${{ env.WEB_APP_NAME }} containerRegistryName=${{ env.ACR_NAME }} containerImage=${{ env.CONTAINER_IMAGE }} sqlServerName=${{ env.SQL_SERVER_NAME }} dbAdminLogin=${{ env.SQL_SERVER_ADMIN_LOGIN }} dbAdminLoginPassword=${{ env.SQL_SERVER_ADMIN_PASSWORD }} dbName=${{ env.SQL_DB_NAME }}
        deploymentName: gha-deployment-${{ github.run_id }}-${{ github.run_number }}
    
